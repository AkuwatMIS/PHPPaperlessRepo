<?php
/**
 * Created by PhpStorm.
 * User: Akhuwat
 * Date: 6/28/2018
 * Time: 7:21 PM
 */

namespace common\components\Helpers;
use common\models\UserStructureMapping;
use common\models\Users;
use common\models\UserDevices;
use common\models\Devices;
use common\components\Helpers\FireBaseHelper;
use common\models\NotificationLogs;
class PushHelper
{
    public static function newApplicationNotification($application){
        ///find users of branch
        $users=UserStructureMapping::find()->where(['obj_id'=>$application->branch_id,'obj_type'=>'branch'])->all();

        $role_id=PushHelper::getUserRole($users,'Branch Manager');
        if(!empty($role_id)) {
            $user_device = UserDevices::find()->where(['user_id' => $role_id])->one();
            $device = Devices::find()->where(['id' => $user_device->device_id])->one();
            $message = array("message" => 'You have received new application with APP-' . $application->application_no, "title" => "New Application", "subtitle" => "subtitle", "tickerText" => "tickerText");
            $response = FireBaseHelper::sendNotification(array($device->push_id), $message);
            ///logs entry
            $notification_log = new NotificationLogs();
            $notification_log->notification_type = 'Application';
            $notification_log->message = $message['message'];
            $notification_log->title = $message['title'];
            $notification_log->sub_title = $message['subtitle'];
            $notification_log->ticker_text = $message['tickerText'];
            $notification_log->device_id = $device->id;
            $notification_log->push_notification_id = $device->push_id;
            $response=((json_decode($response)));
            if($response->success!=0){
                $notification_log->response = 'success';
                $notification_log->status = 'success';
            }
            else{
                $notification_log->response = 'failure';
                $notification_log->status = 'failure';
                $notification_log->error_description = $response->results[0]->error;
            }
            $notification_log->send_by = '1';
            $notification_log->send_to = $role_id;
            $notification_log->save();
            ///
            return $notification_log->status;
        }
    }
    public static function applicationPendingNotification($application){

        $users=UserStructureMapping::find()->where(['obj_id'=>$application->branch_id,'obj_type'=>'branch'])->all();

        $role_id=PushHelper::getUserRole($users,'Branch Manager');
        if(!empty($role_id)) {
            $user_device = UserDevices::find()->where(['user_id' => $role_id])->one();
            $device = Devices::find()->where(['id' => $user_device->device_id])->one();
            $message = array("message"=>'Application against APP-'. $application->application_no.' generated by'. $application->user->username .'is pending for Approval',"title"=>"Appication Pending for Approval","subtitle"=>"subtitle","tickerText"=>"tickerText");
            $response = FireBaseHelper::sendNotification(array($device->push_id), $message);

            ///logs entry
            $notification_log = new NotificationLogs();
            $notification_log->notification_type = 'Application';
            $notification_log->message = $message['message'];
            $notification_log->title = $message['title'];
            $notification_log->sub_title = $message['subtitle'];
            $notification_log->ticker_text = $message['tickerText'];
            $notification_log->device_id = $device->id;
            $notification_log->push_notification_id = $device->push_id;
            $response=((json_decode($response)));
            if($response->success!=0){
                $notification_log->response = 'success';
                $notification_log->status = 'success';
            }
            else{
                $notification_log->response = 'failure';
                $notification_log->status = 'failure';
                $notification_log->error_description = $response->results[0]->error;
            }
            $notification_log->send_by = '1';
            $notification_log->send_to = $role_id;
            $notification_log->save();

            return $notification_log->status;
            ///
        }
    }
    public static function applicationApproveNotification($application){
        $users=UserStructureMapping::find()->where(['obj_id'=>$application->branch_id,'obj_type'=>'branch'])->all();
        $role_id=PushHelper::getUserRole($users,'Branch Manager');
        if(!empty($role_id)) {
            $user_device = UserDevices::find()->where(['user_id' => $application->created_by])->one();
            $device = Devices::find()->where(['id' => $user_device->device_id])->one();
            $message = array("message"=>'Application against APP-'. $application->application_no.' is approved by'.$role_id,"title"=>"Application Approved","subtitle"=>"subtitle","tickerText"=>"tickerText");
            $response = FireBaseHelper::sendNotification(array($device->push_id), $message);

            ///logs entry
            $notification_log = new NotificationLogs();
            $notification_log->notification_type = 'Application';
            $notification_log->message = $message['message'];
            $notification_log->title = $message['title'];
            $notification_log->sub_title = $message['subtitle'];
            $notification_log->ticker_text = $message['tickerText'];
            $notification_log->device_id = $device->id;
            $notification_log->push_notification_id = $device->push_id;
            $response=((json_decode($response)));
            if($response->success!=0){
                $notification_log->response = 'success';
                $notification_log->status = 'success';
            }
            else{
                $notification_log->response = 'failure';
                $notification_log->status = 'failure';
                $notification_log->error_description = $response->results[0]->error;
            }
            $notification_log->send_by = '1';
            $notification_log->send_to = $application->created_by;
            $notification_log->save();
            return $notification_log->status;

        ///
        }
    }
    public static function applicationUpdateNotification($application){

        $users=UserStructureMapping::find()->where(['obj_id'=>$application->branch_id,'obj_type'=>'branch'])->all();

        $role_id=PushHelper::getUserRole($users,'Branch Manager');
        if(!empty($role_id)) {
            $user_device = UserDevices::find()->where(['user_id' => $role_id])->one();
            $device = Devices::find()->where(['id' => $user_device->device_id])->one();
            $message = array("message"=>'Application against APP-'. $application->application_no.' updated successfully',"title"=>"title","Application Updated"=>"subtitle","tickerText"=>"tickerText");
            $response = FireBaseHelper::sendNotification(array($device->push_id), $message);

            ///logs entry
            $notification_log = new NotificationLogs();
            $notification_log->notification_type = 'Application';
            $notification_log->message = $message['message'];
            $notification_log->title = $message['title'];
            $notification_log->sub_title = $message['subtitle'];
            $notification_log->ticker_text = $message['tickerText'];
            $notification_log->device_id = $device->id;
            $notification_log->push_notification_id = $device->push_id;
            $response=((json_decode($response)));
            if($response->success!=0){
                $notification_log->response = 'success';
                $notification_log->status = 'success';
            }
            else{
                $notification_log->response = 'failure';
                $notification_log->status = 'failure';
                $notification_log->error_description = $response->results[0]->error;
            }
            $notification_log->send_by = '1';
            $notification_log->send_to = $role_id;
            $notification_log->save();
            return $notification_log->status;
            ///
        }
    }
    public static function applicationRejectNotification($application){
        $users=UserStructureMapping::find()->where(['obj_id'=>$application->branch_id,'obj_type'=>'branch'])->all();

        $role_id=PushHelper::getUserRole($users,'Branch Manager');
        if(!empty($role_id)) {
            $user_device = UserDevices::find()->where(['user_id' => $application->created_by])->one();
            $device = Devices::find()->where(['id' => $user_device->device_id])->one();
            $message = array("message"=>'Application against APP-'.$application->application_no.' is rejected by '.$application->id,"title"=>"Application Rejected","subtitle"=>"subtitle","tickerText"=>"tickerText");
            $response = FireBaseHelper::sendNotification(array($device->push_id), $message);

            ///logs entry
            $notification_log = new NotificationLogs();
            $notification_log->notification_type = 'Application';
            $notification_log->message = $message['message'];
            $notification_log->title = $message['title'];
            $notification_log->sub_title = $message['subtitle'];
            $notification_log->ticker_text = $message['tickerText'];
            $notification_log->device_id = $device->id;
            $notification_log->push_notification_id = $device->push_id;
            $response=((json_decode($response)));
            if($response->success!=0){
                $notification_log->response = 'success';
                $notification_log->status = 'success';
            }
            else{
                $notification_log->response = 'failure';
                $notification_log->status = 'failure';
                $notification_log->error_description = $response->results[0]->error;
            }
            $notification_log->send_by = '1';
            $notification_log->send_to = $role_id;
            $notification_log->save();
            return $notification_log->status;
            ///
        }
    }
    public static function socialAppraisalNotification($application){
        $users=UserStructureMapping::find()->where(['obj_id'=>$application->branch_id,'obj_type'=>'branch'])->all();

        $role_id=PushHelper::getUserRole($users,'Branch Manager');
        if(!empty($role_id)) {
            $user_device = UserDevices::find()->where(['user_id' => $role_id])->one();
            $device = Devices::find()->where(['id' => $user_device->device_id])->one();
            $message = array("message"=>'Social appraisal against APP-'.$application->application_no.' successfully  done',"title"=>"Social Appraisal Done","subtitle"=>"subtitle","tickerText"=>"tickerText");
            $response = FireBaseHelper::sendNotification(array($device->push_id), $message);

            ///logs entry
            $notification_log = new NotificationLogs();
            $notification_log->notification_type = 'Social Appraisal';
            $notification_log->message = $message['message'];
            $notification_log->title = $message['title'];
            $notification_log->sub_title = $message['subtitle'];
            $notification_log->ticker_text = $message['tickerText'];
            $notification_log->device_id = $device->id;
            $notification_log->push_notification_id = $device->push_id;
            $response=((json_decode($response)));
            if($response->success!=0){
                $notification_log->response = 'success';
                $notification_log->status = 'success';
            }
            else{
                $notification_log->response = 'failure';
                $notification_log->status = 'failure';
                $notification_log->error_description = $response->results[0]->error;
            }
            $notification_log->send_by = '1';
            $notification_log->send_to = $role_id;
            $notification_log->save();
            return $notification_log->status;
            ///
        }
    }
    public static function socialAppraisalPendingNotification($application){
        $users=UserStructureMapping::find()->where(['obj_id'=>$application->branch_id,'obj_type'=>'branch'])->all();

        $role_id=PushHelper::getUserRole($users,'Branch Manager');
        if(!empty($role_id)) {
            $user_device = UserDevices::find()->where(['user_id' => $role_id])->one();
            $device = Devices::find()->where(['id' => $user_device->device_id])->one();
            $message = array("message"=>'Social appraisal  against APP-'.$application->application_no.' is pending for Approval',"title"=>"Social Appraisal Pending","subtitle"=>"subtitle","tickerText"=>"tickerText");
            $response = FireBaseHelper::sendNotification(array($device->push_id), $message);

            ///logs entry
            $notification_log = new NotificationLogs();
            $notification_log->notification_type = 'Social Appraisal';
            $notification_log->message = $message['message'];
            $notification_log->title = $message['title'];
            $notification_log->sub_title = $message['subtitle'];
            $notification_log->ticker_text = $message['tickerText'];
            $notification_log->device_id = $device->id;
            $notification_log->push_notification_id = $device->push_id;
            $response=((json_decode($response)));
            if($response->success!=0){
                $notification_log->response = 'success';
                $notification_log->status = 'success';
            }
            else{
                $notification_log->response = 'failure';
                $notification_log->status = 'failure';
                $notification_log->error_description = $response->results[0]->error;
            }
            $notification_log->send_by = '1';
            $notification_log->send_to = $role_id;
            $notification_log->save();
            return $notification_log->status;
            ///
        }
    }
    public static function socialAppraisalApproveNotification($application){
        $users=UserStructureMapping::find()->where(['obj_id'=>$application->branch_id,'obj_type'=>'branch'])->all();
        $role_id=PushHelper::getUserRole($users,'Branch Manager');
        if(!empty($role_id)) {
            $user_device = UserDevices::find()->where(['user_id' => $application->created_by])->one();
            $device = Devices::find()->where(['id' => $user_device->device_id])->one();
            $message = array("message"=>'Social appraisal  against APP-'.$application->application_no.' is approved by '.$role_id,"title"=>"Social Appraisal Approved","subtitle"=>"subtitle","tickerText"=>"tickerText");
            $response = FireBaseHelper::sendNotification(array($device->push_id), $message);

            ///logs entry
            $notification_log = new NotificationLogs();
            $notification_log->notification_type = 'Social Appraisal';
            $notification_log->message = $message['message'];
            $notification_log->title = $message['title'];
            $notification_log->sub_title = $message['subtitle'];
            $notification_log->ticker_text = $message['tickerText'];
            $notification_log->device_id = $device->id;
            $notification_log->push_notification_id = $device->push_id;
            $response=((json_decode($response)));
            if($response->success!=0){
                $notification_log->response = 'success';
                $notification_log->status = 'success';
            }
            else{
                $notification_log->response = 'failure';
                $notification_log->status = 'failure';
                $notification_log->error_description = $response->results[0]->error;
            }
            $notification_log->send_by = '1';
            $notification_log->send_to = $application->created_by;
            $notification_log->save();
            return $notification_log->status;
            ///
        }
    }
    public static function buisnessAppraisalNotification($application){
        $users=UserStructureMapping::find()->where(['obj_id'=>$application->branch_id,'obj_type'=>'branch'])->all();

        $role_id=PushHelper::getUserRole($users,'Branch Manager');
        if(!empty($role_id)) {
            $user_device = UserDevices::find()->where(['user_id' => $role_id])->one();
            $device = Devices::find()->where(['id' => $user_device->device_id])->one();
            $message = array("message"=>'Buisness appraisal  against APP-'. $application->appliction_no .' successfully done',"title"=>"Buisness Appraisal Done","subtitle"=>"subtitle","tickerText"=>"tickerText");
            $response = FireBaseHelper::sendNotification(array($device->push_id), $message);

            ///logs entry
            $notification_log = new NotificationLogs();
            $notification_log->notification_type = 'Buisness Appraisal';
            $notification_log->message = $message['message'];
            $notification_log->title = $message['title'];
            $notification_log->sub_title = $message['subtitle'];
            $notification_log->ticker_text = $message['tickerText'];
            $notification_log->device_id = $device->id;
            $notification_log->push_notification_id = $device->push_id;
            $response=((json_decode($response)));
            if($response->success!=0){
                $notification_log->response = 'success';
                $notification_log->status = 'success';
            }
            else{
                $notification_log->response = 'failure';
                $notification_log->status = 'failure';
                $notification_log->error_description = $response->results[0]->error;
            }
            $notification_log->send_by = '1';
            $notification_log->send_to = $role_id;
            $notification_log->save();
            return $notification_log->status;
            ///
        }
    }
    public static function buisnessAppraisalPendingNotification($application){
        $users=UserStructureMapping::find()->where(['obj_id'=>$application->branch_id,'obj_type'=>'branch'])->all();

        $role_id=PushHelper::getUserRole($users,'Branch Manager');
        if(!empty($role_id)) {
            $user_device = UserDevices::find()->where(['user_id' => $role_id])->one();
            $device = Devices::find()->where(['id' => $user_device->device_id])->one();
            $message = array("message"=>'Buisness appraisal  against APP-'.$application->appliction_no.' is pending for Approval',"title"=>"Buisness Appraisal Pending","subtitle"=>"subtitle","tickerText"=>"tickerText");
            $response = FireBaseHelper::sendNotification(array($device->push_id), $message);

            ///logs entry
            $notification_log = new NotificationLogs();
            $notification_log->notification_type = 'Buisness Appraisal';
            $notification_log->message = $message['message'];
            $notification_log->title = $message['title'];
            $notification_log->sub_title = $message['subtitle'];
            $notification_log->ticker_text = $message['tickerText'];
            $notification_log->device_id = $device->id;
            $notification_log->push_notification_id = $device->push_id;
            $response=((json_decode($response)));
            if($response->success!=0){
                $notification_log->response = 'success';
                $notification_log->status = 'success';
            }
            else{
                $notification_log->response = 'failure';
                $notification_log->status = 'failure';
                $notification_log->error_description = $response->results[0]->error;
            }
            $notification_log->send_by = '1';
            $notification_log->send_to = $role_id;
            $notification_log->save();
            return $notification_log->status;
            ///
        }
    }
    public static function buisnessAppraisalApproveNotification($application){
        $users=UserStructureMapping::find()->where(['obj_id'=>$application->branch_id,'obj_type'=>'branch'])->all();

        $role_id=PushHelper::getUserRole($users,'Branch Manager');
        if(!empty($role_id)) {
            $user_device = UserDevices::find()->where(['user_id' => $application->created_by])->one();
            $device = Devices::find()->where(['id' => $user_device->device_id])->one();
            $message = array("message"=>'Buisness appraisal  against APP-'.$application->appliction_no.' is approved by '.$role_id,"title"=>"Buisness Appraisal Approved","subtitle"=>"subtitle","tickerText"=>"tickerText");
            $response = FireBaseHelper::sendNotification(array($device->push_id), $message);

            ///logs entry
            $notification_log = new NotificationLogs();
            $notification_log->notification_type = 'Buisness Appraisal';
            $notification_log->message = $message['message'];
            $notification_log->title = $message['title'];
            $notification_log->sub_title = $message['subtitle'];
            $notification_log->ticker_text = $message['tickerText'];
            $notification_log->device_id = $device->id;
            $notification_log->push_notification_id = $device->push_id;
            $response=((json_decode($response)));
            if($response->success!=0){
                $notification_log->response = 'success';
                $notification_log->status = 'success';
            }
            else{
                $notification_log->response = 'failure';
                $notification_log->status = 'failure';
                $notification_log->error_description = $response->results[0]->error;
            }
            $notification_log->send_by = '1';
            $notification_log->send_to = $application->created_by;
            $notification_log->save();
            return $notification_log->status;
            ///
        }
    }
    public static function groupGenerateNotification($group){
        $users=UserStructureMapping::find()->where(['obj_id'=>$group->branch_id,'obj_type'=>'branch'])->all();

        $role_id=PushHelper::getUserRole($users,'Branch Manager');
        if(!empty($role_id)) {
            $user_device = UserDevices::find()->where(['user_id' => $role_id])->one();
            $device = Devices::find()->where(['id' => $user_device->device_id])->one();
            $message = array("message"=>'Group generate successfully against '.$group->grp_no,"title"=>"Group Generated","subtitle"=>"subtitle","tickerText"=>"tickerText");
            $response = FireBaseHelper::sendNotification(array($device->push_id), $message);
            ///logs entry
            $notification_log = new NotificationLogs();
            $notification_log->notification_type = 'Group Formation';
            $notification_log->message = $message['message'];
            $notification_log->title = $message['title'];
            $notification_log->sub_title = $message['subtitle'];
            $notification_log->ticker_text = $message['tickerText'];
            $notification_log->device_id = $device->id;
            $notification_log->push_notification_id = $device->push_id;
            $response=((json_decode($response)));
            if($response->success!=0){
                $notification_log->response = 'success';
                $notification_log->status = 'success';
            }
            else{
                $notification_log->response = 'failure';
                $notification_log->status = 'failure';
                $notification_log->error_description = $response->results[0]->error;
            }
            $notification_log->send_by = '1';
            $notification_log->send_to = $role_id;
            $notification_log->save();
            return $notification_log->status;
            ///
       }
    }
    public static function fundsRequestNotification($fund_request){
        $users=UserStructureMapping::find()->where(['obj_id'=>$fund_request->branch_id,'obj_type'=>'branch'])->all();

        $role_id=PushHelper::getUserRole($users,'Branch Manager');
        if(!empty($role_id)) {
            $user_device = UserDevices::find()->where(['user_id' => $role_id])->one();
            $device = Devices::find()->where(['id' => $user_device->device_id])->one();
            $message = array("message"=>'Fund Request generated by '.$fund_request->user->username,"title"=>"Fund Request Generated","subtitle"=>"subtitle","tickerText"=>"tickerText");
            $response = FireBaseHelper::sendNotification(array($device->push_id), $message);
            ///logs entry
            $notification_log = new NotificationLogs();
            $notification_log->notification_type = 'Fund Request';
            $notification_log->message = $message['message'];
            $notification_log->title = $message['title'];
            $notification_log->sub_title = $message['subtitle'];
            $notification_log->ticker_text = $message['tickerText'];
            $notification_log->device_id = $device->id;
            $notification_log->push_notification_id = $device->push_id;
            $response=((json_decode($response)));
            if($response->success!=0){
                $notification_log->response = 'success';
                $notification_log->status = 'success';
            }
            else{
                $notification_log->response = 'failure';
                $notification_log->status = 'failure';
                $notification_log->error_description = $response->results[0]->error;
            }
            $notification_log->send_by = '1';
            $notification_log->send_to = $role_id;
            $notification_log->save();
            return $notification_log->status;
            ///
        }
    }
    public static function fundsRequestApproveNotification($fund_request){
        $users=UserStructureMapping::find()->where(['obj_id'=>$fund_request->branch_id,'obj_type'=>'branch'])->all();
        $role_id=PushHelper::getUserRole($users,'Branch Manager');
        if(!empty($role_id)) {
            $user_device = UserDevices::find()->where(['user_id' => $fund_request->created_by])->one();
            $device = Devices::find()->where(['id' => $user_device->device_id])->one();
            $message = array("message"=>'Fund Request approved by '.$role_id,"title"=>"Fund Request Approved","subtitle"=>"subtitle","tickerText"=>"tickerText");
            $response = FireBaseHelper::sendNotification(array($device->push_id), $message);
            ///logs entry
            $notification_log = new NotificationLogs();
            $notification_log->notification_type = 'Fund Request';
            $notification_log->message = $message['message'];
            $notification_log->title = $message['title'];
            $notification_log->sub_title = $message['subtitle'];
            $notification_log->ticker_text = $message['tickerText'];
            $notification_log->device_id = $device->id;
            $notification_log->push_notification_id = $device->push_id;
            $response=((json_decode($response)));
            if($response->success!=0){
                $notification_log->response = 'success';
                $notification_log->status = 'success';
            }
            else{
                $notification_log->response = 'failure';
                $notification_log->status = 'failure';
                $notification_log->error_description = $response->results[0]->error;
            }
            $notification_log->send_by = '1';
            $notification_log->send_to = $fund_request->created_by;
            $notification_log->save();
            return $notification_log->status;
            ///
        }
    }
    public static function lacNotification($group){
        $users=UserStructureMapping::find()->where(['obj_id'=>$group->branch_id,'obj_type'=>'branch'])->all();

        $role_id=PushHelper::getUserRole($users,'Branch Manager');
        if(!empty($role_id)) {
            $user_device = UserDevices::find()->where(['user_id' => $role_id])->one();
            $device = Devices::find()->where(['id' => $user_device->device_id])->one();
            $message = array("message"=>'LAC agaisnt Group '.$group->grp_no .' successfully done',"title"=>"LAC Successfully Done","subtitle"=>"subtitle","tickerText"=>"tickerText");
            $response = FireBaseHelper::sendNotification(array($device->push_id), $message);
            ///logs entry
            $notification_log = new NotificationLogs();
            $notification_log->notification_type = 'LAC';
            $notification_log->message = $message['message'];
            $notification_log->title = $message['title'];
            $notification_log->sub_title = $message['subtitle'];
            $notification_log->ticker_text = $message['tickerText'];
            $notification_log->device_id = $device->id;
            $notification_log->push_notification_id = $device->push_id;
            $response=((json_decode($response)));
            if($response->success!=0){
                $notification_log->response = 'success';
                $notification_log->status = 'success';
            }
            else{
                $notification_log->response = 'failure';
                $notification_log->status = 'failure';
                $notification_log->error_description = $response->results[0]->error;
            }
            $notification_log->send_by = '1';
            $notification_log->send_to = $role_id;
            $notification_log->save();
            return $notification_log->status;
            ///
        }
    }
    public static function disbursementNotification($disbursement){
        $users=UserStructureMapping::find()->where(['obj_id'=>$disbursement->branch_id,'obj_type'=>'branch'])->all();

        $role_id=PushHelper::getUserRole($users,'Branch Manager');
        if(!empty($role_id)) {
            $user_device = UserDevices::find()->where(['user_id' => $role_id])->one();
            $device = Devices::find()->where(['id' => $user_device->device_id])->one();
            $message = array("message"=>'Disbusement agaist '.$disbursement->id.' at '.$disbursement->venue.' successfully done',"title"=>"Disbursement Successfully Done","subtitle"=>"subtitle","tickerText"=>"tickerText");
            $response = FireBaseHelper::sendNotification(array($device->push_id), $message);
            ///logs entry
            $notification_log = new NotificationLogs();
            $notification_log->notification_type = 'Disbursement';
            $notification_log->message = $message['message'];
            $notification_log->title = $message['title'];
            $notification_log->sub_title = $message['subtitle'];
            $notification_log->ticker_text = $message['tickerText'];
            $notification_log->device_id = $device->id;
            $notification_log->push_notification_id = $device->push_id;
            $response=((json_decode($response)));
            if($response->success!=0){
                $notification_log->response = 'success';
                $notification_log->status = 'success';
            }
            else{
                $notification_log->response = 'failure';
                $notification_log->status = 'failure';
                $notification_log->error_description = $response->results[0]->error;
            }
            $notification_log->send_by = '1';
            $notification_log->send_to = $role_id;
            $notification_log->save();
            return $notification_log->status;
            ///
        }
    }
    public static function applicationFeeReceiveNotification($operation){
        $users=UserStructureMapping::find()->where(['obj_id'=>$operation->branch_id,'obj_type'=>'branch'])->all();

        $role_id=PushHelper::getUserRole($users,'Branch Manager');
        if(!empty($role_id)) {
            $user_device = UserDevices::find()->where(['user_id' => $role_id])->one();
            $device = Devices::find()->where(['id' => $user_device->device_id])->one();
            $message = array("message"=>'Rs: '.$operation->application->fee.' Fee is received with Receipt No:'.$operation->receipt_no.' against '.$operation->application->application_no,"title"=>"Application Fee Receive","subtitle"=>"subtitle","tickerText"=>"tickerText");
            $response = FireBaseHelper::sendNotification(array($device->push_id), $message);

            ///logs entry
            $notification_log = new NotificationLogs();
            $notification_log->notification_type = 'Application';
            $notification_log->message = $message['message'];
            $notification_log->title = $message['title'];
            $notification_log->sub_title = $message['subtitle'];
            $notification_log->ticker_text = $message['tickerText'];
            $notification_log->device_id = $device->id;
            $notification_log->push_notification_id = $device->push_id;
            $response=((json_decode($response)));
            if($response->success!=0){
                $notification_log->response = 'success';
                $notification_log->status = 'success';
            }
            else{
                $notification_log->response = 'failure';
                $notification_log->status = 'failure';
                $notification_log->error_description = $response->results[0]->error;
            }
            $notification_log->send_by = '1';
            $notification_log->send_to = $role_id;
            $notification_log->save();
            return $notification_log->status;
            ///
        }
    }
    /* public static function newMemberNotification($name,$cnic){
        return array("message"=>'You have received new member against Name:'. $name.' CNIC:'. $cnic,"title"=>"New Application","subtitle"=>"subtitle","tickerText"=>"tickerText");
    }
    public static function memberProfileUpdateNotification(){
        return array("message"=>'Member Profile updated successfully',"title"=>"Member Profile updated","subtitle"=>"subtitle","tickerText"=>"tickerText");
    }*/
    public static function getUserRole($users,$role){
        $auth = \Yii::$app->authManager;
        $role_id='';
        foreach ($users as $user) {
            ///check user role
            $role_array = $auth->getRolesByUser($user->user_id);
            if (key($role_array) == $role) {
               $role_id = $user->user_id;
            }
        }
        return $role_id;
    }
}